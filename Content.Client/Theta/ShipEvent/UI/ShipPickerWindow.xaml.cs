using Content.Client.Message;
using Content.Shared.Theta.ShipEvent;
using Content.Shared.Theta.ShipEvent.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Theta.ShipEvent.UI;

[GenerateTypedNameReferences]
public sealed partial class ShipPickerWindow : DefaultWindow
{
    public event Action<EventArgs>? InfoRequest;

    private string? TeamName = null;

    public ShipTypePrototype? Selection;
    
    public ShipPickerWindow(string? teamName = null)
    {
        TeamName = teamName;
        RobustXamlLoader.Load(this);
    }

    public void UpdateState(ShipPickerBoundUserInterfaceState state)
    {
        foreach (var shipType in state.ShipTypes)
        {
            var shipTypeEntry = new BoxContainer();
            var shipTypeEntryInfoHolder = new BoxContainer();
            shipTypeEntry.Orientation = BoxContainer.LayoutOrientation.Vertical;
            shipTypeEntryInfoHolder.Orientation = BoxContainer.LayoutOrientation.Horizontal;
            
            var shipTypeLabel = new RichTextLabel();
            shipTypeLabel.SetMarkup($"{shipType.Name}\n \n{GetShipClassName(shipType.Class)}\n \n{shipType.Description}");
            shipTypeLabel.MinWidth = Width / 2;
            shipTypeLabel.SetWidth = Width / 2;

            var shipTypePreviewImage = new TextureRect();
            shipTypePreviewImage.TexturePath = shipType.PreviewImagePath;
            shipTypePreviewImage.SetWidth = Width / 2;
            shipTypePreviewImage.MaxHeight = Height * 1.2f;
            shipTypePreviewImage.Stretch = TextureRect.StretchMode.Scale;
            
            shipTypeEntryInfoHolder.AddChild(shipTypeLabel);
            shipTypeEntryInfoHolder.AddChild(shipTypePreviewImage);

            var selectionButton = new Button();
            selectionButton.Text = Loc.GetString("shipevent-shippicker-selectionbutton");
            selectionButton.OnPressed += _ =>
            {
                Selection = shipType;
                Close();
            };
            selectionButton.MinWidth = Width;
            selectionButton.SetWidth = Width;

            shipTypeEntry.AddChild(shipTypeEntryInfoHolder);
            shipTypeEntry.AddChild(selectionButton);
            
            ShipOptionsContainer.AddChild(shipTypeEntry);
        }
    }

    private string GetShipClassName(ShipClass shipClass)
    {
        string className = "";
        switch (shipClass)
        {
            case ShipClass.Light:
                className = "light";
                break;
            case ShipClass.Medium:
                className = "medium";
                break;
            case ShipClass.Heavy:
                className = "heavy";
                break;
            case ShipClass.Special:
                className = "special";
                break;
        }
        return Loc.GetString("shipevent-shippicker-"+className+"class");
    }
}
