using System.Numerics;
using Content.Shared.Theta.ShipEvent;
using Content.Shared.Theta.ShipEvent.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.Theta.ShipEvent.UI;

[GenerateTypedNameReferences]
public sealed partial class ShipPickerWindow : DefaultWindow
{
    public ShipTypePrototype? Selection;

    public Action<ShipTypePrototype>? OnSelectionMade;

    public ShipPickerWindow()
    {
        RobustXamlLoader.Load(this);
    }

    public void UpdateState(ShipPickerBoundUserInterfaceState state)
    {
        ShipOptionsContainer.Children.Clear();

        foreach (var shipType in state.ShipTypes)
        {
            var shipContainer = new BoxContainer()
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
            };

            var shipTypeEntry = new BoxContainer()
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                // by default, 4 is separation space between grid elements
                SetSize = new Vector2(Width / 4 - 4 * 4, Height / 2 - 2 * 4),
            };

            var titleContainer = new PanelContainer()
            {
            };
            var infoButton = new Button()
            {
                Text = "i",
                HorizontalAlignment = HAlignment.Left,
            };
            infoButton.TooltipSupplier = _ => GetTooltip(
                Loc.GetString(shipType.Class),
                Loc.GetString("shipevent-shippicker-mincrewamount") + " " + shipType.MinCrewAmount,
                Loc.GetString(shipType.Description)
            );
            infoButton.TooltipDelay = 0;
            titleContainer.AddChild(infoButton);

            var shipName = new RichTextLabel()
            {
                HorizontalAlignment = HAlignment.Center,
            };
            shipName.SetMessage(Loc.GetString(shipType.Name));
            titleContainer.AddChild(shipName);

            shipTypeEntry.AddChild(titleContainer);

            var shipTypePreviewImage = new TextureRect()
            {
                TexturePath = shipType.PreviewImagePath,
                Stretch = TextureRect.StretchMode.Scale,
            };
            shipTypeEntry.AddChild(shipTypePreviewImage);

            shipContainer.AddChild(shipTypeEntry);

            var selectionButton = new Button()
            {
                Text = Loc.GetString("shipevent-shippicker-selectionbutton"),
            };
            selectionButton.OnPressed += _ =>
            {
                Selection = shipType;
                OnSelectionMade?.Invoke(Selection);
                Close();
            };
            shipContainer.AddChild(selectionButton);

            ShipOptionsContainer.AddChild(shipContainer);
        }
    }

    private static Tooltip GetTooltip(string shipClass, string crewCount, string desc)
    {
        var tooltip = new Tooltip();
        tooltip.SetMessage(FormattedMessage.FromMarkup(
            $"{Loc.GetString("shipevent-shipclass-label")} {shipClass}\n" +
            $"{crewCount}\n" +
            $"{desc}"
            ));
        return tooltip;
    }
}
