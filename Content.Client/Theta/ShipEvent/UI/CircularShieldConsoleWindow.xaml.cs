using Content.Client.Message;
using Content.Shared.Theta.ShipEvent.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Theta.ShipEvent.UI;

[GenerateTypedNameReferences]
public sealed partial class CircularShieldConsoleWindow : DefaultWindow
{
    public event Action? OnParametersChanged;

    public event Action? OnEnableButtonPressed;
    
    public bool Powered;
    public int Angle => ShieldAngleSlider.Value;
    public new int Width => ShieldWidthSlider.Value;
    public int Radius => ShieldRadiusSlider.Value;

    public CircularShieldConsoleWindow()
    {
        RobustXamlLoader.Load(this);

        ShieldEnableButton.OnPressed += _ => OnEnableButtonPressed?.Invoke();
        ShieldAngleSlider.OnValueChanged += _ => OnParametersChanged?.Invoke();
        ShieldWidthSlider.OnValueChanged += _ => OnParametersChanged?.Invoke();
        ShieldRadiusSlider.OnValueChanged += _ => OnParametersChanged?.Invoke();
    }

    public void UpdateState(CircularShieldConsoleWindowBoundsUserInterfaceState state)
    {
        Powered = state.Powered;

        ShieldAngleSlider.Value = state.Angle;

        ShieldWidthSlider.Value = state.Width;
        ShieldWidthSlider.MaxValue = state.MaxWidth;
        
        ShieldRadiusSlider.Value = state.Radius;
        ShieldRadiusSlider.MaxValue = state.MaxRadius;

        ShieldPowerStatusLabel.SetMarkup(Loc.GetString(state.Powered ? "shipevent-shieldconsole-powered" : "shipevent-shieldconsole-nopower"));
    }
}
