using System.Linq;
using Content.Client.Message;
using Content.Client.Theta.ModularRadar.Modules.ShipEvent;
using Content.Shared.Theta.ShipEvent.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;

namespace Content.Client.Theta.ShipEvent.Console;

[GenerateTypedNameReferences]
public sealed partial class CircularShieldConsoleWindow : DefaultWindow
{
    public event Action? OnEnableButtonPressed;

    public event Action<Angle>? OnAngleChanged;

    public CircularShieldConsoleWindow()
    {
        RobustXamlLoader.Load(this);

        ShieldEnableButton.OnPressed += _ => OnEnableButtonPressed?.Invoke();

        if (RadarScreen.TryGetModule<RadarShieldStatus>(out var shieldModule))
        {
            OnAngleChanged += shieldModule.UpdateShieldParameters;
        }

        if (RadarScreen.TryGetModule<RadarControlShield>(out var controlShield))
        {
            controlShield.UpdateShieldRotation += angle => OnAngleChanged?.Invoke(angle);
        }
    }

    public void SetMatrix(EntityCoordinates? coordinates, Angle? angle)
    {
        RadarScreen.SetMatrix(coordinates, angle);
    }

    public void SetOwner(EntityUid uid)
    {
        RadarScreen.SetOwnerUid(uid);
    }

    public void UpdateState(ShieldConsoleBoundsUserInterfaceState shieldState)
    {
        if(!shieldState.Shield.IsControlling)
            return;
        RadarScreen.UpdateState(shieldState);

        var state = shieldState.Shield;
        ShieldPowerStatusLabel.SetMarkup(Loc.GetString(state.Powered ? "shipevent-shieldconsole-powered" : "shipevent-shieldconsole-nopower"));
    }
}
